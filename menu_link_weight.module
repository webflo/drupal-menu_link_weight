<?php

/**
 * @file
 * Replaces the menu link weight dropdown with a tabledrag widget.
 */

use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\system\Entity\Menu;

/**
 * Include functionality related to reordering of options by other modules.
 */
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'menu_link_weight') . '/menu_link_weight.reorder.inc';

/**
 * Minimum weight of a menu link. In Drupal core this is currently -50.
 */
define('MENU_LINK_WEIGHT_MIN_DELTA', -50);

/**
 * Maximum weight of a menu link. In Drupal core this is currently 50.
 */
define('MENU_LINK_WEIGHT_MAX_DELTA', 50);

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node forms.
 */
function menu_link_weight_form_node_form_alter(&$form, FormStateInterface $form_state) {
  // Opt out if the node has no menu.
  if (!isset($form['menu']['link'])) {
    return;
  }

  $current_user = \Drupal::currentUser();
  $module_handler = \Drupal::moduleHandler();
  /** @var \Drupal\Core\Render\ElementInfoManagerInterface $element_info_manager */
  $element_info_manager = \Drupal::service('plugin.manager.element_info');

  $is_admin = $current_user->hasPermission('administer menu') && isset($form['menu']['link']);
  $is_admin_per_menu = $module_handler->moduleExists('menu_admin_per_menu')
    && function_exists('_menu_admin_per_menu_filter_parent_options')
    && isset($form['menu']['link']['parent'])
    && !$current_user->hasPermission('administer menu')
    && _menu_admin_per_menu_filter_parent_options($form['menu']['link']);

  // Only allow users with the "administer menu" permission or that the Menu
  // Admin Per Menu has granted access to some menus.
  if (!$is_admin && !$is_admin_per_menu) {

  }

  // Prevent the "weight" widget from being displayed.
  $form['menu']['link']['weight']['#access'] = FALSE;

  // Add submission/validation handlers.
  $form['#validate'][] = 'menu_link_weight_node_form_validate';
  /** @see menu_ui_form_node_form_alter() */
  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = 'menu_link_weight_node_form_submit';
    }
  }

  // Add the Menu Link weight fieldset.
  $defaults = $element_info_manager->getInfo('fieldset');
  $form['menu']['link']['menu_link_weight'] = array(
    '#type' => 'fieldset',
    '#title' => t('Menu link weight'),
    '#prefix' => '<div id="menu-link-weight-wrapper">',
    '#suffix' => '</div>',
    '#process' => array_merge($defaults['#process'], ['menu_link_weight_node_element_process']),
  );
  $form['menu']['link']['menu_link_weight']['table'] = array(
    '#type' => 'table',
    '#header' => array(
      'name' => t('Name'),
      'weight' => t('Weight'),
    ),
    '#id' => 'menu-link-weight-reorder',
    '#tabledrag' => array(array(
      'action' => 'order',
      'relationship' => 'sibling',
      'group' => 'menu-link-weight-item-weight',
    )),
    // Remove the 'table' element from the form value structure.
    '#parents' => ['menu', 'menu_link_weight'],
  );

  // Define the "db_weights" element, which will hold hidden fields with
  // the values of the menu links in the database. Upon validation we will
  // check whether the weights are still the same as when the form was
  // built, to make sure users won't overwrite each other's changes.
  $form['menu']['link']['db_weights'] = array(
    '#tree' => TRUE,
  );
  $form['#attached']['library'][] = 'menu_link_weight/menu_link_weight';

  // Define the AJAX callback for changes in the Parent element.
  $form['menu']['link']['menu_parent']['#ajax'] = array(
    'callback' => 'menu_link_weight_parent_ajax_callback',
    'wrapper' => 'menu-link-weight-wrapper',
  );

  // This next button will not be displayed if JS is enabled.
  $form['menu']['link']['menu_link_weight_nojs'] = array(
    '#type' => 'submit',
    '#value' => menu_link_weight_get_button_text(),
    // No need to validate when submitting this.
    '#limit_validation_errors' => array(),
    '#validate' => array(),
    '#submit' => array('menu_link_weight_node_form_update_parent_submit'),
    '#attributes' => ['class' => ['js-hide']],
  );
}

/**
 * Implements hook_form_FORM_ID_alter() for menu_overview_form().
 *
 * Adds an anchor tag so we can link to a menu item directly from the node form.
 *
 * @see menu_link_weight_node_element_process
 */
function menu_link_weight_form_menu_form_alter(&$form, FormStateInterface $form_state) {
  if (!isset($form['links']['links'])) {
    return;
  }

  foreach (Element::children($form['links']['links']) as $key) {
    /** @see \Drupal\menu_ui\MenuForm::buildOverviewTreeForm() */
    list(/** 'menu_plugin_id' */, $plugin_id) = explode(':', $key, 2);
    $html_id = 'menu-link-weight-link-id-' . Html::getId($plugin_id);
    $form['links']['links'][$key]['#attributes']['id'] = $html_id;
  }
}

/**
 * Gets the name for the "No-Javascript" button we want to use.
 *
 * @return string
 *   Translated text to show on the button.
 */
function menu_link_weight_get_button_text() {
  return t('Change parent (update list of weights)');
}

/**
 * Custom submit hook for node form which sets a different menu link parent.
 *
 * @see menu_link_weight_form_node_form_alter()
 * @see menu_link_weight_parent_ajax_callback()
 */
function menu_link_weight_node_form_update_parent_submit($form, FormStateInterface $form_state) {
  $form_state->setRebuild();
}

/**
 * AJAX callback that returns the updated menu_link_weight element.
 *
 * This will update whenever the selection of the menu link parent changes.
 */
function menu_link_weight_parent_ajax_callback($form, FormStateInterface $form_state) {
  return $form['menu']['link']['menu_link_weight'];
}

/**
 * Process callback for the menu link weight element.
 */
function menu_link_weight_node_element_process($element, FormStateInterface $form_state, &$complete_form) {
  // Find out which parent to select after loading (or AJAX reloading) the form.
  $parent_element = $complete_form['menu']['link']['menu_parent'];
  $parent_value = _menu_link_weight_get_parent_value_from_element($parent_element, $form_state);
  if (strstr($parent_value, ':')) {
    // The parent value is of the form "$menu_name:" or
    // "$menu_name:$link_plugin_id".
    /** @see \Drupal\Core\Menu\MenuParentFormSelector::getParentSelectOptions() */
    list($menu_name, $parent_id) = explode(':', $parent_value, 2);
  }
  else {
    return $element;
  }

  // Get the menu title for the parent based on the current menu selection.
  $url = Url::fromRoute('entity.menu.edit_form', array('menu' => $menu_name));
  if ($parent_id === '') {
    $label = Menu::load($menu_name)->label();
  }
  else {
    /** @var \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager */
    $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
    /** @var \Drupal\Core\Menu\MenuLinkInterface $parent_link */
    $parent_link = $menu_link_manager->createInstance($parent_id);
    $label = $parent_link->getTitle();

    /** @see menu_link_weight_form_menu_form_alter() */
    $html_id = 'menu-link-weight-link-id-' . Html::getId($parent_id);
    $url->setOption('fragment', $html_id);
  }
  $generated_url = $url->toString(TRUE);
  $generated_url->applyTo($element);
  $element['#description'] = t('Change the weight of the links within the <a href=":url">@menu</a> menu by dragging the items up/down.', array(
    ':url' => $generated_url->getGeneratedUrl(),
    '@menu' => $label,
  ));

  // Get the ID for the current menu link.
  $current_mlid = !empty($complete_form['menu']['link']['id']['#value']) ? $complete_form['menu']['link']['id']['#value'] : NULL;
  // Get the title for the current menu link.
  $new_item_title = $form_state->hasValue(['menu', 'link_title']) ? $form_state->getValue(['menu', 'link_title']) : $complete_form['menu']['link']['title']['#default_value'];

  // Get the options array we will use to build the form elements for every
  // menu link.
  $options = _menu_link_weight_get_options($menu_name, $parent_id, $current_mlid, $new_item_title);
  // Allow other modules to reorder the options, if applicable.
  if ($relative_position = $form_state->get(['menu_link_weight_relative_position', $parent_value])) {
    $options = _menu_link_weight_reorder_options($options, $relative_position);
  }
  // Build the form elements using the options array.
  foreach ($options as $link_id => $info) {
    $element['table'][$link_id] = array(
      '#attributes' => ['class' => ['draggable']],
      '#weight' => $info['weight'],
      'name' => $info['title'],
      'weight' => array(
        '#type' => 'weight',
        '#title' => t('Weight'),
        '#default_value' => $info['weight'],
        '#delta' => MENU_LINK_WEIGHT_MAX_DELTA,
        '#title_display' => 'invisible',
        '#attributes' => ['class' => ['menu-link-weight-item-weight']],
      ),
    );
    if ($link_id != 'link_current') {
      // Save the current weight in the database of the rendered menu links
      // into the form, so that we can give an error if the weights have changed
      // by the time the form is submitted.
      $complete_form['menu']['link']['db_weights'][$link_id] = array(
        '#type' => 'hidden',
        '#value' => $info['db_weight'],
      );
    }
  }
  return $element;
}

/**
 * Gets the menu link parent value from the form.
 *
 * Helper function for menu link weight process callback.
 *
 * @param array $parent_element
 *   Menu link parent form element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 *
 * @return string
 *   Menu link
 */
function _menu_link_weight_get_parent_value_from_element(array $parent_element, FormStateInterface $form_state) {
  if ($form_state->hasValue(['menu', 'menu_parent'])) {
    $value = $form_state->getValue(['menu', 'menu_parent']);
  }
  else {
    $value = !empty($parent_element['#value']) ? $parent_element['#value'] : $parent_element['#default_value'];
  }
  return $value;
}

/**
 * Gets a list of of options for a specific menu/parent.
 *
 * @param string $menu_name
 *   The name of the menu.
 * @param string $parent_id
 *   The parent link plugin ID.
 * @param int $current_mlid
 *   The menu link for the current item.
 * @param string $new_item_title
 *   The title for the new menu link to be created.
 *
 * @see _menu_parents_recurse
 *
 * @return array
 *   List of options with index "link_current" or the menu link ID.
 *   Values include:
 *     - title: Santized title for the menu link.
 *     - weight: Calculated new weight.
 *     - db_weight: Current weight in the database, while form is being built.
 */
function _menu_link_weight_get_options($menu_name, $parent_id, $current_mlid, $new_item_title = NULL) {
  // Get the raw tree from the database.
  $tree = _menu_link_weight_get_tree($menu_name, $parent_id);
  // Weights will have to be re-ordered from -50 to 50 for fine-grained
  // control over the weight of the new element.
  $weight = MENU_LINK_WEIGHT_MIN_DELTA;
  $options = array();

  $link_current_title_build = [
    '#type' => 'inline_template',
    '#template' => '<strong><span class="menu-link-weight-link-current">{{ current_title }}</span></strong> ({% trans %}provided menu link{% endtrans %})',
    '#context' => [
      'current_title' => Unicode::truncate($new_item_title, 30, TRUE, FALSE),
    ],
  ];

  // Find out whether to add another (fake) item for the new link.
  $add_link = TRUE;
  foreach ($tree as $element) {
    if ($element->link->getPluginId() === $current_mlid) {
      $add_link = FALSE;
    }
  }

  // Add link on top, if needed.
  if ($add_link) {
    $options['link_current'] = array(
      'title' => $link_current_title_build,
      'weight' => $weight,
      'db_weight' => NULL,
    );
    $weight++;
  }

  // Loop through the tree again.
  foreach ($tree as $element) {
    // Change the title & ID for the current menu link.
    $plugin_id = $element->link->getPluginId();
    if ($plugin_id === $current_mlid) {
      $id = 'link_current';
      $title_build = $link_current_title_build;
    }
    else {
      $id = $plugin_id;
      $title = Unicode::truncate($element->link->getTitle(), 30, TRUE, FALSE);
      $title_build = Link::fromTextAndUrl($title, $element->link->getUrlObject())->toRenderable();
      $element->link->isEnabled();
      if (!$element->link->isEnabled()) {
        $title_build['#suffix'] = ' (' . t('disabled') . ')';
      }
    }

    $options[$id] = array(
      'title' => $title_build,
      'weight' => $weight,
      'db_weight' => $element->link->getWeight(),
    );
    $weight++;
  }
  return $options;
}

/**
 * Helper function to get all siblings of an item based on the parent.
 *
 * @param string $menu_name
 *   The name of the menu.
 * @param string $parent_id
 *   The parent link plugin ID.
 *
 * @return \Drupal\Core\Menu\MenuLinkTreeElement[]
 *   A menu link tree.
 */
function _menu_link_weight_get_tree($menu_name, $parent_id) {
  /** @var \Drupal\Core\Menu\MenuLinkTreeInterface $menu_link_tree */
  $menu_link_tree = \Drupal::service('menu.link_tree');
  if ($parent_id !== '') {
    /** @var \Drupal\Core\Menu\MenuLinkInterface $link */
    $parent_tree = $menu_link_tree->load($menu_name, (new MenuTreeParameters())
      ->addCondition('id', $parent_id));
    $parent_element = reset($parent_tree);
    $limit = $parent_element->depth + 1;
  }
  else {
    $limit = 1;
  }

  $tree = $menu_link_tree->load($menu_name, (new MenuTreeParameters())
    ->setActiveTrail([$parent_id])
    ->setMinDepth($limit)
    ->setMaxDepth($limit)
    ->addCondition('parent', $parent_id));
  /** @see \Drupal\Core\Menu\MenuParentFormSelector::getParentSelectOptions() */
  $manipulators = array(
    array('callable' => 'menu.default_tree_manipulators:checkNodeAccess'),
    array('callable' => 'menu.default_tree_manipulators:checkAccess'),
    array('callable' => 'menu.default_tree_manipulators:generateIndexAndSort'),
  );
  return $menu_link_tree->transform($tree, $manipulators);
}

/**
 * Validation hook for the menu_link weight element.
 */
function menu_link_weight_node_form_validate($form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager */
  $menu_link_manager = \Drupal::service('plugin.manager.menu.link');

  $parent_element = $form['menu']['link']['menu_parent'];
  $parent_value = _menu_link_weight_get_parent_value_from_element($parent_element, $form_state);
  if ($form_state->hasValue(['menu', 'menu_link_weight'])) {
    list($menu_name, $parent_id) = explode(':', $parent_value);
    // Loop through submitted weights and confirm that the parent link/menu
    // are still the same.
    $weights = $form_state->getValue(['menu', 'menu_link_weight']);
    unset($weights['link_current']);
    foreach ($weights as $link_id => $weight) {
      /** @var \Drupal\Core\Menu\MenuLinkInterface $link */
      $link = $menu_link_manager->createInstance($link_id);
      if ($link->getParent() != $parent_id) {
        $form_state->setErrorByName('menu][menu_link_weight', t('The parent for one of the menu links have been changed by another user, please try again.'));
      }
      if ($link->getMenuName() != $menu_name) {
        $form_state->setErrorByName('menu][menu_link_weight', t('The menu for one of the menu links have been changed by another user, please try again.'));
      }
    }
  }

  if ($form_state->hasValue(['menu', 'db_weights'])) {
    // Check that children and weights are still the same as when the form was
    // loaded. Get the old values from the "hidden" form elements.
    foreach ($form_state->getValue(['menu', 'db_weights']) as $link_id => $db_weight) {
      $link = $menu_link_manager->createInstance($link_id);
      if ($link->getWeight() != $db_weight) {
        $form_state->setErrorByName('menu][menu_link_weight', t('The menu link weights have been changed by another user, please try again.'));
      }
    }
  }

  if (!$form_state->getErrors() && $form_state->hasValue(['menu', 'menu_link_weight', 'link_current', 'weight'])) {
    // Override the weight of the current link.
    $form_state->setValue(['menu', 'weight'], $form_state->getValue(['menu', 'menu_link_weight', 'link_current', 'weight']));
  }
}

/**
 * Custom submit hook for node form which reorders menu link weights.
 *
 * Note: this wil not reorder links that the current user does not have access
 * to (ie. links to access-controlled nodes).
 */
function menu_link_weight_node_form_submit($form, FormStateInterface $form_state) {
  // Return on empty submissions.
  if (!$form_state->hasValue(['menu', 'menu_link_weight'])) {
    return;
  }

  /** @var \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager */
  $menu_link_manager = \Drupal::service('plugin.manager.menu.link');

  $connection = \Drupal::database();
  $transaction = $connection->startTransaction();
  try {
    // Because the form elements were keyed with the item ids from the database,
    // we can simply iterate through the submitted values.
    foreach ($form_state->getValue(['menu', 'menu_link_weight']) as $link_id => $info) {
      if ($link_id == 'link_current') {
        // Do nothing. Changing the weight of the current link will be handled
        // by menu_ui_form_node_form_submit() instead.
        continue;
      }

      /** @var \Drupal\Core\Menu\MenuLinkInterface $link */
      $menu_link_manager->updateDefinition($link_id, ['weight' => $info['weight']]);
    }
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('menu_link_weight', $e);
  }
}
